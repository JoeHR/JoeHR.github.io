(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{582:function(t,s,a){t.exports=a.p+"assets/img/other00_02.d6a8e786.png"},583:function(t,s,a){t.exports=a.p+"assets/img/other00_03.6f0a96fa.png"},584:function(t,s,a){t.exports=a.p+"assets/img/other00_04.214d7f54.png"},585:function(t,s,a){t.exports=a.p+"assets/img/other00_05.b9065087.png"},586:function(t,s,a){t.exports=a.p+"assets/img/other00_06.ffc35b77.png"},587:function(t,s,a){t.exports=a.p+"assets/img/other00_07.4a82b504.png"},588:function(t,s,a){t.exports=a.p+"assets/img/other00_08.50030f0d.png"},589:function(t,s,a){t.exports=a.p+"assets/img/other00_09.fbd0ea52.png"},590:function(t,s,a){t.exports=a.p+"assets/img/other00_10.c4ea324d.png"},591:function(t,s,a){t.exports=a.p+"assets/img/other00_11.750290f4.png"},592:function(t,s,a){t.exports=a.p+"assets/img/other00_12.fb6cedea.png"},661:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"圈复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#圈复杂度"}},[t._v("#")]),t._v(" 圈复杂度")]),t._v(" "),n("h3",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("p",[t._v("怎么才能写出浅显易懂的代码就不得不提软件工程质量度量方法中一个重要的概念——圈复杂度。")]),t._v(" "),n("p",[t._v("圈复杂度（Cyclomatic complexity，简写 CC）也称为条件复杂度，是一种代码复杂度的衡量标准。由托马斯·J·麦凯布（Thomas J. McCabe, Sr.）于 1976 年提出，用来表示程序的复杂度。它可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立现行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数。 简称 CC 。其符号为 VG 或是 M 。")]),t._v(" "),n("p",[t._v("圈复杂度大说明程序代码的判断逻辑复杂，可能质量低且难于测试和维护。有研究表明复杂度和出现缺陷的数量存在强相关性，表明了越复杂的代码越可能会出错。")]),t._v(" "),n("h3",{attrs:{id:"衡量标准"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#衡量标准"}},[t._v("#")]),t._v(" 衡量标准")]),t._v(" "),n("blockquote",[n("p",[t._v("代码复杂度低，代码不一定好，但代码复杂度高，代码一定不好")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("圈复杂度")]),t._v(" "),n("th",[t._v("代码状况")]),t._v(" "),n("th",[t._v("可测性")]),t._v(" "),n("th",[t._v("维护成本")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("1 - 10")]),t._v(" "),n("td",[t._v("清晰、结构化")]),t._v(" "),n("td",[t._v("高")]),t._v(" "),n("td",[t._v("低")])]),t._v(" "),n("tr",[n("td",[t._v("10 - 20")]),t._v(" "),n("td",[t._v("复杂")]),t._v(" "),n("td",[t._v("中")]),t._v(" "),n("td",[t._v("中")])]),t._v(" "),n("tr",[n("td",[t._v("20 - 30")]),t._v(" "),n("td",[t._v("非常复杂")]),t._v(" "),n("td",[t._v("低")]),t._v(" "),n("td",[t._v("高")])]),t._v(" "),n("tr",[n("td",[t._v(">30")]),t._v(" "),n("td",[t._v("不可读")]),t._v(" "),n("td",[t._v("不可测")]),t._v(" "),n("td",[t._v("非常高")])])])]),t._v(" "),n("h2",{attrs:{id:"计算方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算方法"}},[t._v("#")]),t._v(" 计算方法")]),t._v(" "),n("p",[t._v("圈复杂度衡量的是程序中线性独立路径的数量。")]),t._v(" "),n("p",[t._v("例如：如果程序中不包含控制、判断、条件语句，那么复杂度就是 1，因为整个程序只有一条执行路径；")]),t._v(" "),n("p",[t._v("如果程序包含一条 IF 语句，那么就会有两条路径来执行完整个程序，所以这时候的复杂度就是 2；")]),t._v(" "),n("p",[t._v("两个嵌套的 IF 语句，或者包含两个判断条件的一个 IF 语句，复杂度就是 2 * 2 = 4。")]),t._v(" "),n("p",[t._v("更加具体的情况看下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:"/img/other/other00_01.png",alt:"img"}})]),t._v(" "),n("h3",{attrs:{id:"控制流程图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#控制流程图"}},[t._v("#")]),t._v(" 控制流程图")]),t._v(" "),n("p",[t._v("控制流程图，是一个过程或程序的抽象表现，是用在编译器中的一个抽象数据结构，由编译器在内部维护，代表了一个程序执行过程中会遍历到的所有路径。它用图的形式表示一个过程内所有基本块执行的可能流向, 也能反映一个过程的实时执行过程。")]),t._v(" "),n("p",[t._v("下面是一些常见的控制流程：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(582),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"节点判定法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点判定法"}},[t._v("#")]),t._v(" 节点判定法")]),t._v(" "),n("p",[t._v("有一个简单的计算方法，圈复杂度实际上就是等于判定节点的数量再加上 1。向上面提到的："),n("code",[t._v("if else")]),t._v(" 、"),n("code",[t._v("switch case")]),t._v(" 、 "),n("code",[t._v("for")]),t._v("循环、三元运算符等等，都属于一个判定节点 ， 例如下面的代码 ：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("testComplexity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("param"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),n("p",[t._v("上面的代码中一共有"),n("code",[t._v("1")]),t._v("个"),n("code",[t._v("if")]),t._v("语句，一个"),n("code",[t._v("for")]),t._v("循环，两个"),n("code",[t._v("case")]),t._v("语句，一个三元运算符,所以代码复杂度为 "),n("code",[t._v("1+2+1+1+1=6")]),t._v("。另外，需要注意的是 "),n("code",[t._v("|| 和 &&")]),t._v(" 语句也会被算作一个判定节点，例如下面代码的代码复杂为"),n("code",[t._v("3")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("testComplexity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("param"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" param "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        result"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"点边计算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#点边计算法"}},[t._v("#")]),t._v(" 点边计算法")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("M")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v(" − "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 2P\n")])])]),n("ul",[n("li",[t._v("E: 控制流图中 边 的 数量")]),t._v(" "),n("li",[t._v("N：控制流图中 节点 的 数量")]),t._v(" "),n("li",[t._v("P：独立组件的数目")])]),t._v(" "),n("p",[t._v("前两个，边和节点都是数据结构途中最基本的概念：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(583),alt:""}})]),t._v(" "),n("p",[t._v("P 代表图中独立组件的数目，独立组件是什么意思呢？来看看下面两个图，左侧为连通图，右侧为非连通图：")]),t._v(" "),n("ul",[n("li",[t._v("连通图： 对于图中任意两个顶点都是连通的")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(584),alt:""}})]),t._v(" "),n("p",[t._v("一个连通图即为图中的一个独立组件，所以左侧图中独立组件的数目为 1，右侧则有两个独立组件。")]),t._v(" "),n("p",[t._v("对于我们的代码转化而来的控制流程图，正常情况下所有节点都应该是连通的，除非你在某些节点之前执行了 "),n("code",[t._v("return")]),t._v("，显然这样的代码是错误的。所以每个程序流程图的独立组件的数目都为 1，所以上面的公式还可以简化为 "),n("code",[t._v("M = E − N + 2")]),t._v(" 。")]),t._v(" "),n("h2",{attrs:{id:"降低代码的圈复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#降低代码的圈复杂度"}},[t._v("#")]),t._v(" 降低代码的圈复杂度")]),t._v(" "),n("p",[t._v("我们可以通过一些代码重构手段来降低代码的圈复杂度。")]),t._v(" "),n("blockquote",[n("p",[t._v("重构需谨慎，示例代码仅仅代表一种思想，实际代码要远远比示例代码复杂的多。")])]),t._v(" "),n("h3",{attrs:{id:"抽象配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象配置"}},[t._v("#")]),t._v(" 抽象配置")]),t._v(" "),n("p",[t._v("通过抽象配置将复杂的逻辑判断进行简化。例如下面的代码，根据用户的选择项执行相应的操作，重构后降低了代码复杂度，并且如果之后有新的选项，直接加入配置即可，而不需要再去深入代码逻辑中进行改动：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(585),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"单一职责-提炼函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单一职责-提炼函数"}},[t._v("#")]),t._v(" 单一职责 - 提炼函数")]),t._v(" "),n("p",[t._v("单一职责原则"),n("code",[t._v("（SRP）")]),t._v("：每个类都应该有一个单一的功能，一个类应该只有一个发生变化的原因。")]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("JavaScript")]),t._v(" 中，需要用到的类的场景并不太多，单一职责原则则是更多地运用在对象或者方法级别上面。")]),t._v(" "),n("blockquote",[n("p",[t._v("函数应该做一件事，做好这件事，只做这一件事。 — 代码整洁之道")])]),t._v(" "),n("p",[t._v("关键是如何定义这 “一件事” ，如何将代码中的逻辑进行抽象，有效的提炼函数有利于降低代码复杂度和降低维护成本。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(586),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"使用-break-和-return-代替控制标记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-break-和-return-代替控制标记"}},[t._v("#")]),t._v(" 使用 break 和 return 代替控制标记")]),t._v(" "),n("p",[t._v("我们经常会使用一个控制标记来标示当前程序运行到某一状态，很多场景下，使用 "),n("code",[t._v("break")]),t._v(" 和 "),n("code",[t._v("return")]),t._v(" 可以代替这些标记并降低代码复杂度。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(587),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"用函数取代参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用函数取代参数"}},[t._v("#")]),t._v(" 用函数取代参数")]),t._v(" "),n("p",[n("code",[t._v("setField")]),t._v(" 和 "),n("code",[t._v("getField")]),t._v(" 函数就是典型的函数取代参数，如果么有 "),n("code",[t._v("setField、getField")]),t._v(" 函数，我们可能需要一个很复杂的 "),n("code",[t._v("setValue、getValue")]),t._v(" 来完成属性赋值操作：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(588),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"简化条件判断-逆向条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简化条件判断-逆向条件"}},[t._v("#")]),t._v(" 简化条件判断 - 逆向条件")]),t._v(" "),n("p",[t._v("某些复杂的条件判断可能逆向思考后会变的更简单。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(589),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"简化条件判断-合并条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简化条件判断-合并条件"}},[t._v("#")]),t._v(" 简化条件判断 -合并条件")]),t._v(" "),n("p",[t._v("将复杂冗余的条件判断进行合并。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(590),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"简化条件判断-提取条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简化条件判断-提取条件"}},[t._v("#")]),t._v(" 简化条件判断 - 提取条件")]),t._v(" "),n("p",[t._v("将复杂难懂的条件进行语义化提取。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(591),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"圈复杂度检测方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#圈复杂度检测方法"}},[t._v("#")]),t._v(" 圈复杂度检测方法")]),t._v(" "),n("h3",{attrs:{id:"eslint-规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eslint-规则"}},[t._v("#")]),t._v(" eslint 规则")]),t._v(" "),n("p",[n("code",[t._v("eslint")]),t._v("提供了检测代码圈复杂度的"),n("code",[t._v("rules")]),t._v(":")]),t._v(" "),n("p",[t._v("我们将开启 "),n("code",[t._v("rules")]),t._v(" 中的 "),n("code",[t._v("complexity")]),t._v(" 规则，并将圈复杂度大于 "),n("code",[t._v("0")]),t._v(" 的代码的 "),n("code",[t._v("rule severity")]),t._v(" 设置为 "),n("code",[t._v("warn")]),t._v(" 或 "),n("code",[t._v("error")]),t._v(" 。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("rules")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("complexity")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样 "),n("code",[t._v("eslint")]),t._v(" 就会自动检测出所有函数的代码复杂度，并输出一个类似下面的 "),n("code",[t._v("message")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Method "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'testFunc'")]),t._v(" has a complexity "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.")]),t._v(" Maximum allowed is "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nAsync "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" has a complexity "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.")]),t._v(" Maximum allowed is "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),n("h3",{attrs:{id:"cliengine"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cliengine"}},[t._v("#")]),t._v(" CLIEngine")]),t._v(" "),n("p",[t._v("我们可以借助 "),n("code",[t._v("eslint")]),t._v(" 的 "),n("code",[t._v("CLIEngine")]),t._v(" ，在本地使用自定义的 "),n("code",[t._v("eslint")]),t._v(" 规则扫描代码，并获取扫描结果输出。")]),t._v(" "),n("p",[t._v("初始化 "),n("code",[t._v("CLIEngine")]),t._v(" ：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" eslint "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" CLIEngine "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" eslint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cli "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CLIEngine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("parserOptions")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ecmaVersion")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2018")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("rules")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("complexity")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("使用 "),n("code",[t._v("executeOnFiles")]),t._v(" 对指定文件进行扫描，并获取结果，过滤出所有 "),n("code",[t._v("complexity")]),t._v(" 的 "),n("code",[t._v("message")]),t._v(" 信息。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reports "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cli"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("executeOnFiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("results"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" reports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" messages "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" messages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ruleId "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" messages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ruleId "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"complexity"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"提取-message"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提取-message"}},[t._v("#")]),t._v(" 提取 message")]),t._v(" "),n("p",[t._v("通过 "),n("code",[t._v("eslint")]),t._v(" 的检测结果将有用的信息提取出来，先测试几个不同类型的函数，看看 "),n("code",[t._v("eslint")]),t._v(" 的检测结果：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestClass")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("执行结果：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Function "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'func1'")]),t._v(" has a complexity "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" Maximum allowed is "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("\nArrow "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" has a complexity "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" Maximum allowed is "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("\nMethod "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'func3'")]),t._v(" has a complexity "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" Maximum allowed is "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("\nAsync "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'func4'")]),t._v(" has a complexity "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" Maximum allowed is "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("\n\n")])])]),n("p",[t._v("可以发现，除了前面的函数类型，以及后面的复杂度，其他都是相同的。")]),t._v(" "),n("p",[t._v("函数类型：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Function")]),t._v(" ：普通函数")]),t._v(" "),n("li",[n("code",[t._v("Arrow function")]),t._v(" ： 箭头函数")]),t._v(" "),n("li",[n("code",[t._v("Method")]),t._v(" ： 类方法")]),t._v(" "),n("li",[n("code",[t._v("Async function")]),t._v(" ： 异步函数")])]),t._v(" "),n("p",[t._v("截取方法类型：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REG_FUNC_TYPE")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(Method |Async function |Arrow function |Function )")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFunctionType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hasFuncType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REG_FUNC_TYPE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hasFuncType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" RegExp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("将有用的部分提取出来：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MESSAGE_PREFIX")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Maximum allowed is 1."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MESSAGE_SUFFIX")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"has a complexity of "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMain")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MESSAGE_PREFIX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MESSAGE_SUFFIX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("提取方法名称：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFunctionName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" main "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMain")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("'([a-zA-Z0-9_$]+)'")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" test "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" RegExp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("截取代码复杂度：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComplexity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" main "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMain")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d+)\\.")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("RegExp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("除了 "),n("code",[t._v("message")]),t._v(" ，还有其他的有用信息：")]),t._v(" "),n("ul",[n("li",[t._v("函数位置：获取 "),n("code",[t._v("messages")]),t._v(" 中的 "),n("code",[t._v("line")]),t._v(" 、"),n("code",[t._v("column")]),t._v(" 即函数的行、列位置")]),t._v(" "),n("li",[t._v("当前文件名称："),n("code",[t._v("reports")]),t._v(" 结果中可以获取当前扫描文件的绝对路径 "),n("code",[t._v("filePath")]),t._v(" ，通过下面的操作获取真实文件名：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("filePath.replace(process.cwd(), '').trim()\n")])])]),n("ul",[n("li",[t._v("复杂度等级，根据函数的复杂度等级给出重构建议：")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("圈复杂度")]),t._v(" "),n("th",[t._v("代码状况")]),t._v(" "),n("th",[t._v("可测性")]),t._v(" "),n("th",[t._v("维护成本")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("1 - 10")]),t._v(" "),n("td",[t._v("清晰、结构化")]),t._v(" "),n("td",[t._v("高")]),t._v(" "),n("td",[t._v("低")])]),t._v(" "),n("tr",[n("td",[t._v("10 - 20")]),t._v(" "),n("td",[t._v("复杂")]),t._v(" "),n("td",[t._v("中")]),t._v(" "),n("td",[t._v("中")])]),t._v(" "),n("tr",[n("td",[t._v("20 - 30")]),t._v(" "),n("td",[t._v("非常复杂")]),t._v(" "),n("td",[t._v("低")]),t._v(" "),n("td",[t._v("高")])]),t._v(" "),n("tr",[n("td",[t._v(">30")]),t._v(" "),n("td",[t._v("不可读")]),t._v(" "),n("td",[t._v("不可测")]),t._v(" "),n("td",[t._v("非常高")])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("圈复杂度")]),t._v(" "),n("th",[t._v("代码状况")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("1 - 10")]),t._v(" "),n("td",[t._v("无需重构")])]),t._v(" "),n("tr",[n("td",[t._v("11 - 15")]),t._v(" "),n("td",[t._v("建议重构")])]),t._v(" "),n("tr",[n("td",[t._v(">15")]),t._v(" "),n("td",[t._v("强烈建议重构")])])])]),t._v(" "),n("h2",{attrs:{id:"架构设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#架构设计"}},[t._v("#")]),t._v(" 架构设计")]),t._v(" "),n("p",[t._v("将代码复杂度检测封装成基础包，根据自定义配置输出检测数据，供其他应用调用。")]),t._v(" "),n("p",[t._v("上面的展示了使用 "),n("code",[t._v("eslint")]),t._v(" 获取代码复杂度的思路，下面我们要把它封装为一个通用的工具，考虑到工具可能在不同场景下使用，例如：网页版的分析报告、cli 版的命令行工具，我们把通用的能力抽象出来以 "),n("code",[t._v("npm包")]),t._v(" 的形式供其他应用使用。")]),t._v(" "),n("p",[t._v("在计算项目代码复杂度之前，我们首先要具备一项基础能力，代码扫描，即我们要知道我们要对项目里的哪些文件做分析，首先 "),n("code",[t._v("eslint")]),t._v(" 是具备这样的能力的，我们也可以直接用 "),n("code",[t._v("glob")]),t._v(" 来遍历文件。但是他们都有一个缺点，就是 "),n("code",[t._v("ignore")]),t._v(" 规则是不同的，这对于用户来讲是有一定学习成本的，因此我这里把手动封装代码扫描，使用通用的 "),n("code",[t._v("npm ignore")]),t._v(" 规则，这样代码扫描就可以直接使用 "),n("code",[t._v(".gitignore")]),t._v("这样的配置文件。另外，代码扫描作为代码分析的基础能力，其他代码分析也是可以公用的。")]),t._v(" "),n("ul",[n("li",[t._v("基础能力\n"),n("ul",[n("li",[t._v("代码扫描能力")]),t._v(" "),n("li",[t._v("复杂度检测能力")]),t._v(" "),n("li",[t._v("...")])])]),t._v(" "),n("li",[t._v("应用\n"),n("ul",[n("li",[t._v("命令行工具")]),t._v(" "),n("li",[t._v("代码分析报告")]),t._v(" "),n("li",[t._v("...")])])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(592),alt:""}})]),t._v(" "),n("Vssue",{attrs:{title:"Vssue Demo"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);