(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{617:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"何为单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为单例模式"}},[t._v("#")]),t._v(" 何为单例模式")]),t._v(" "),a("p",[t._v("保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就叫做单例模式")]),t._v(" "),a("h2",{attrs:{id:"单例模式的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式的实现"}},[t._v("#")]),t._v(" 单例模式的实现")]),t._v(" "),a("p",[t._v("问题：如何才能保证一个类仅有一个实例")]),t._v(" "),a("p",[t._v("一般情况下，当我们创建了一个类（本质是构造函数），可以通过  "),a("code",[t._v("new")]),t._v(" 关键字调用构造函数进而生成任无数个实例对象。比如下面的类：")]),t._v(" "),a("div",{staticClass:"language-javascipt extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nclass SingleDog {\n\t\n\tshow(){\n\t\tconsole.log('我是一个单身狗')\n\t}\n\n}\n\n\nconst s1 = new SingleDog()\nconst s2 = new SingleDong()\n\ns1 === s2\t\t// false\n\n可以看到 s1 和 s2 是两个实例，类似这种 先 new 了一个 s1，又new 了一个 s2 ,很明显 s1 和 s2 之前除了构造器韩式是同一个，没有其它任何瓜葛，两者是相互独立的对象，各占一款内存空间\n")])])]),a("p",[t._v("显然上面的 做法不是单例模式，而单例模式想要实现的是是："),a("strong",[t._v("不管尝试去创建多少次，它都只会给你返回第一次所创建的实例（并且也是微医的一个实例）")])]),t._v(" "),a("p",[t._v("所有要做到这一点，就需要 构造函数  "),a("strong",[t._v("具备判断自己是否已经创建过一个实例")]),t._v("的能力。我们仙子啊吧这段判断逻辑携程一个静态方法（其实也可以直接写入构造函数的函数体里）：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDog")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我是一个单身狗'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否已经new 过 一个实例")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("SingleDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若这个微医的实例不存在，那么先创建它")]),t._v("\n            SingleDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果这个唯一的实例 已经存在，则直接返回 这个实例")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SingleDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  SingleDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  SingleDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ns1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" s2\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("除了楼上实现方式外，getInstance 的逻辑还可以用闭包来实现：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\nSingleDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义自由变量 instance  模拟私有变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断自由变量是否为 null")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 为 null 则 new 出唯一实例")]),t._v("\n            instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingleDog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("可以看出，在 getInstance 方法的 判断和拦截下，不管调用多少次，SingleDog 都只会返回一个实例。")]),t._v(" "),a("h2",{attrs:{id:"单例模式的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式的应用"}},[t._v("#")]),t._v(" 单例模式的应用")]),t._v(" "),a("p",[t._v("近年来，基于 "),a("code",[t._v("Flux")]),t._v("架构的状态管理工具层出不穷，其中应用最广泛的要输 "),a("code",[t._v("Redux")]),t._v("和 "),a("code",[t._v("Vuex")]),t._v("。无论是 "),a("code",[t._v("Redux")]),t._v("和"),a("code",[t._v("Vuex")]),t._v(",它们都实现了一个全局的 Store 用于存储应用的所有状态，这个Store的实现，正式单例模式的典型应用。这里以 Vuex 为例，研究下 单例模式是怎么发光发热的")]),t._v(" "),a("h3",{attrs:{id:"理解vuex-中的-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解vuex-中的-store"}},[t._v("#")]),t._v(" 理解Vuex 中的 store")]),t._v(" "),a("p",[t._v(":::info")]),t._v(" "),a("p",[t._v("Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此他便作为一个“唯一数据源（SSOT）”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接的定位任一特定的状态片段，在调试的过程中也能轻易的取得整个应用状态的快照。")]),t._v(" "),a("p",[t._v("------ Vuex官方文档")]),t._v(" "),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("在 Vue 中，组件之间是独立的，组件间的通信最常用的办法是通过 props 属性传递（限于父子组件），稍微复杂点的（比如兄弟组件）需要通过简单的事件监听或者 eventBus 来解决。")]),t._v(" "),a("p",[t._v("但当组件非常多，组件关系复杂，且嵌套层次很深的时候，这种原始的通信方式会使我们的逻辑边得复杂难以维护，这时最好的做法就是将共享的数据抽出来、放在全局、供组件门按照一定的规则去存取数据，保证状态以一种可预测的方式发生变化。于是便有了 Vuex,这个用来存放共享数据的唯一数据源就是 Store.")]),t._v(" "),a("p",[t._v("所以 在 Vue 实例中，一个Vue实例只能有一个 Vuex,即 一个Vue实例只能对应一个 Store。")]),t._v(" "),a("h3",{attrs:{id:"vuex-如何确保store-的唯一性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-如何确保store-的唯一性"}},[t._v("#")]),t._v(" Vuex 如何确保Store 的唯一性")]),t._v(" "),a("p",[t._v("我们先来看看如何在 项目中引入 Vuex")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 安装vuex 插件")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vuex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将store 注入到Vue 实例中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("el")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    store\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("通过调用 "),a("code",[t._v("Vue.use()")]),t._v(" 方法，安装了Vuex插件，Vuex插件是一个对象，它在内部实现了一个"),a("code",[t._v("install")]),t._v("方法，这个方法会在插件安装的时候被调用，从而把 Store 注入到Vue 实例中去，也就是说 每  install 一次，都会尝试给Vue 实例注入一个 Store")]),t._v(" "),a("p",[t._v("在 install 方法里，有一段逻辑和我们楼上的 "),a("code",[t._v("getInstance")]),t._v(" 非常相似的逻辑：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Vue\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个 Vue 的作用和楼上的 instance 作用一样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("_Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断传入的Vue实例对象是否已经被install过 Vuex 插件（是否有了唯一的state）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" _Vue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[vuex] already installed.Vue.use(Vuex) should be called only once.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若没有，则为这个Vue实例对象 install 一个唯一的 Vuex")]),t._v("\n    Vue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _Vue\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将Vuex 的初始化逻辑写进 Vue 的钩子函数里")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMinxin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("楼上便是 Vuex 源码中单例模式的实现办法了，套路可以说和我们的 "),a("code",[t._v("getInstance")]),t._v(" 如出一辙。通过这种方式，可以保证一个Vue实例（即一个Vue应用）只会被 install 一次 Vuex 插件，所以每个 Vue 实例只会拥有一个全局的 Store.")]),t._v(" "),a("p",[t._v("单例模式除了在 Vuex 中大展身手，我们在 Redux 、jQuery 等许多优秀的前端库里也都能看到单例模式的身影。")]),t._v(" "),a("Vssue",{attrs:{title:"Vssue Demo"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);